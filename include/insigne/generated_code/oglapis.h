
/*
 * this is auto generated code, please do not modify
 * generated by codegen.exe
 */

#pragma once

#include "insigne/gl/identifiers.h"

#if defined(PLATFORM_WINDOWS)
#	ifndef APIENTRY
#		define APIENTRY __stdcall
#	endif
#	ifndef APICALL
#		define APICALL __declspec(dllimport)
#	endif
#else
#	ifndef APIENTRY
#		define APIENTRY
#	endif
#	ifndef APICALL
#		define APICALL
#	endif
#endif

namespace insigne {
typedef void (APIENTRY *glActiveTexture_t)(GLenum texture);
extern glActiveTexture_t glActiveTexture;

typedef void (APIENTRY *glAttachShader_t)(GLuint program, GLuint shader);
extern glAttachShader_t glAttachShader;

typedef void (APIENTRY *glBindBuffer_t)(GLenum target, GLuint buffer);
extern glBindBuffer_t glBindBuffer;

typedef void (APIENTRY *glBindBufferBase_t)(GLenum target, GLuint index, GLuint buffer);
extern glBindBufferBase_t glBindBufferBase;

typedef void (APIENTRY *glBindBufferRange_t)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern glBindBufferRange_t glBindBufferRange;

typedef void (APIENTRY *glBindFramebuffer_t)(GLenum target, GLuint framebuffer);
extern glBindFramebuffer_t glBindFramebuffer;

typedef void (APIENTRY *glBindRenderbuffer_t)(GLenum target, GLuint renderbuffer);
extern glBindRenderbuffer_t glBindRenderbuffer;

typedef void (APIENTRY *glBindTexture_t)(GLenum target, GLuint texture);
extern glBindTexture_t glBindTexture;

typedef void (APIENTRY *glBindVertexArray_t)(GLuint targetArray);
extern glBindVertexArray_t glBindVertexArray;

typedef void (APIENTRY *glBlendEquation_t)(GLenum mode);
extern glBlendEquation_t glBlendEquation;

typedef void (APIENTRY *glBlendFunc_t)(GLenum sfactor, GLenum dfactor);
extern glBlendFunc_t glBlendFunc;

typedef void (APIENTRY *glBlitFramebuffer_t)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern glBlitFramebuffer_t glBlitFramebuffer;

typedef void (APIENTRY *glBufferData_t)(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
extern glBufferData_t glBufferData;

typedef void (APIENTRY *glBufferSubData_t)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data);
extern glBufferSubData_t glBufferSubData;

typedef GLenum (APIENTRY *glCheckFramebufferStatus_t)(GLenum target);
extern glCheckFramebufferStatus_t glCheckFramebufferStatus;

typedef void (APIENTRY *glClear_t)(GLbitfield mask);
extern glClear_t glClear;

typedef void (APIENTRY *glClearColor_t)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern glClearColor_t glClearColor;

typedef void (APIENTRY *glClearDepthf_t)(GLfloat depth);
extern glClearDepthf_t glClearDepthf;

typedef void (APIENTRY *glColorMask_t)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern glColorMask_t glColorMask;

typedef void (APIENTRY *glCompileShader_t)(GLuint shader);
extern glCompileShader_t glCompileShader;

typedef GLuint (APIENTRY *glCreateProgram_t)();
extern glCreateProgram_t glCreateProgram;

typedef GLuint (APIENTRY *glCreateShader_t)(GLenum shaderType);
extern glCreateShader_t glCreateShader;

typedef void (APIENTRY *glCullFace_t)(GLenum mode);
extern glCullFace_t glCullFace;

typedef void (APIENTRY *glDeleteBuffers_t)(GLsizei n, const GLuint* buffers);
extern glDeleteBuffers_t glDeleteBuffers;

typedef void (APIENTRY *glDeleteProgram_t)(GLuint program);
extern glDeleteProgram_t glDeleteProgram;

typedef void (APIENTRY *glDeleteShader_t)(GLuint shader);
extern glDeleteShader_t glDeleteShader;

typedef void (APIENTRY *glDeleteVertexArrays_t)(GLsizei n, const GLuint* arrays);
extern glDeleteVertexArrays_t glDeleteVertexArrays;

typedef void (APIENTRY *glDeleteFramebuffers_t)(GLsizei n, GLuint* framebuffers);
extern glDeleteFramebuffers_t glDeleteFramebuffers;

typedef void (APIENTRY *glDeleteTextures_t)(GLsizei n, const GLuint* textures);
extern glDeleteTextures_t glDeleteTextures;

typedef void (APIENTRY *glDepthFunc_t)(GLenum func);
extern glDepthFunc_t glDepthFunc;

typedef void (APIENTRY *glDepthMask_t)(GLboolean flag);
extern glDepthMask_t glDepthMask;

typedef void (APIENTRY *glDisable_t)(GLenum cap);
extern glDisable_t glDisable;

typedef void (APIENTRY *glDrawBuffers_t)(GLsizei n, const GLenum* bufs);
extern glDrawBuffers_t glDrawBuffers;

typedef void (APIENTRY *glDrawElements_t)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);
extern glDrawElements_t glDrawElements;

typedef void (APIENTRY *glEnable_t)(GLenum cap);
extern glEnable_t glEnable;

typedef void (APIENTRY *glEnableVertexAttribArray_t)(GLuint index);
extern glEnableVertexAttribArray_t glEnableVertexAttribArray;

typedef void (APIENTRY *glFramebufferRenderbuffer_t)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern glFramebufferRenderbuffer_t glFramebufferRenderbuffer;

typedef void (APIENTRY *glFramebufferTexture2D_t)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern glFramebufferTexture2D_t glFramebufferTexture2D;

typedef void (APIENTRY *glFrontFace_t)(GLenum mode);
extern glFrontFace_t glFrontFace;

typedef void (APIENTRY *glGenBuffers_t)(GLsizei n, GLuint* buffers);
extern glGenBuffers_t glGenBuffers;

typedef void (APIENTRY *glGenFramebuffers_t)(GLsizei n, GLuint* framebuffers);
extern glGenFramebuffers_t glGenFramebuffers;

typedef void (APIENTRY *glGenRenderbuffers_t)(GLsizei n, GLuint* renderbuffers);
extern glGenRenderbuffers_t glGenRenderbuffers;

typedef void (APIENTRY *glGenTextures_t)(GLsizei n, GLuint* textures);
extern glGenTextures_t glGenTextures;

typedef void (APIENTRY *glGenVertexArrays_t)(GLsizei n, GLuint* arrays);
extern glGenVertexArrays_t glGenVertexArrays;

typedef void (APIENTRY *glGenerateMipmap_t)(GLenum target);
extern glGenerateMipmap_t glGenerateMipmap;

typedef GLint (APIENTRY *glGetAttribLocation_t)(GLuint program, const GLchar* name);
extern glGetAttribLocation_t glGetAttribLocation;

typedef GLenum (APIENTRY *glGetError_t)();
extern glGetError_t glGetError;

typedef void (APIENTRY *glGetIntegerv_t)(GLenum pname, GLint* data);
extern glGetIntegerv_t glGetIntegerv;

typedef void (APIENTRY *glGetShaderInfoLog_t)(GLuint shader, GLsizei maxLength, GLsizei* length, GLchar* infoLog);
extern glGetShaderInfoLog_t glGetShaderInfoLog;

typedef void (APIENTRY *glGetShaderiv_t)(GLuint shader, GLenum pname, GLint* params);
extern glGetShaderiv_t glGetShaderiv;

typedef const GLubyte* (APIENTRY *glGetString_t)(GLenum name);
extern glGetString_t glGetString;

typedef const GLubyte* (APIENTRY *glGetStringi_t)(GLenum name, GLuint index);
extern glGetStringi_t glGetStringi;

typedef GLuint (APIENTRY *glGetUniformBlockIndex_t)(GLuint program, const GLchar *uniformBlockName);
extern glGetUniformBlockIndex_t glGetUniformBlockIndex;

typedef GLint (APIENTRY *glGetUniformLocation_t)(GLuint program, const GLchar* name);
extern glGetUniformLocation_t glGetUniformLocation;

typedef void (APIENTRY *glLinkProgram_t)(GLuint program);
extern glLinkProgram_t glLinkProgram;

typedef void (APIENTRY *glPixelStorei_t)(GLenum pname, GLint param);
extern glPixelStorei_t glPixelStorei;

typedef void (APIENTRY *glPolygonMode_t)(GLenum face, GLenum mode);
extern glPolygonMode_t glPolygonMode;

typedef void (APIENTRY *glReadBuffer_t)(GLenum src);
extern glReadBuffer_t glReadBuffer;

typedef void (APIENTRY *glReadPixels_t)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * data);
extern glReadPixels_t glReadPixels;

typedef void (APIENTRY *glRenderbufferStorage_t)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern glRenderbufferStorage_t glRenderbufferStorage;

typedef void (APIENTRY *glRenderbufferStorageMultisample_t)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height);
extern glRenderbufferStorageMultisample_t glRenderbufferStorageMultisample;

typedef void (APIENTRY *glScissor_t)(GLint x, GLint y, GLsizei width, GLsizei height);
extern glScissor_t glScissor;

typedef void (APIENTRY *glShaderSource_t)(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);
extern glShaderSource_t glShaderSource;

typedef void (APIENTRY *glStencilFunc_t)(GLenum func, GLint ref, GLuint mask);
extern glStencilFunc_t glStencilFunc;

typedef void (APIENTRY *glStencilOp_t)(GLenum sfail, GLenum dpfail, GLenum dppass);
extern glStencilOp_t glStencilOp;

typedef void (APIENTRY *glTexImage2D_t)(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* data);
extern glTexImage2D_t glTexImage2D;

typedef void (APIENTRY *glTexParameteri_t)(GLenum target, GLenum pname, GLint param);
extern glTexParameteri_t glTexParameteri;

typedef void (APIENTRY *glTexStorage2D_t)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height);
extern glTexStorage2D_t glTexStorage2D;

typedef void (APIENTRY *glUniform1f_t)(GLint location, GLfloat v0);
extern glUniform1f_t glUniform1f;

typedef void (APIENTRY *glUniform1i_t)(GLint location, GLint v0);
extern glUniform1i_t glUniform1i;

typedef void (APIENTRY *glUniform3fv_t)(GLint location, GLsizei count, const GLfloat* value);
extern glUniform3fv_t glUniform3fv;

typedef void (APIENTRY *glUniformBlockBinding_t)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern glUniformBlockBinding_t glUniformBlockBinding;

typedef void (APIENTRY *glUniformMatrix4fv_t)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
extern glUniformMatrix4fv_t glUniformMatrix4fv;

typedef void (APIENTRY *glUseProgram_t)(GLuint program);
extern glUseProgram_t glUseProgram;

typedef void (APIENTRY *glVertexAttribPointer_t)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
extern glVertexAttribPointer_t glVertexAttribPointer;

typedef void (APIENTRY *glViewport_t)(GLint x, GLint y, GLsizei width, GLsizei height);
extern glViewport_t glViewport;

typedef void (APIENTRY *glDisableVertexAttribArray_t)(GLuint index);
extern glDisableVertexAttribArray_t glDisableVertexAttribArray;

typedef void (APIENTRY *glFinish_t)();
extern glFinish_t glFinish;

}
